[
    {
        "source_url": "https://modelcontextprotocol.io/introduction",
        "title": "Introduction - Model Context Protocol",
        "text": "Model Context Protocol\nhome page Search... Python SDK TypeScript SDK Java SDK Kotlin SDK C# SDK Get Started Introduction Quickstart Example Servers Example Clients FAQs Tutorials Building MCP with LLMs Debugging Inspector Concepts Core architecture Resources Prompts Tools Sampling Roots Transports Development What's New Roadmap Contributing Model Context Protocol\nhome page Search... Search... Navigation Get Started Introduction User Guide SDKs Specification User Guide SDKs Specification GitHub C# SDK released! Check out\nwhat else is new. MCP is an open protocol that standardizes how applications provide context to LLMs. Think of MCP like a USB-C port for AI applications. Just as USB-C provides a standardized way to connect your devices to various peripherals and accessories, MCP provides a standardized way to connect AI models to different data sources and tools.\n\nMCP helps you build agents and complex workflows on top of LLMs. LLMs frequently need to integrate with data and tools, and MCP provides: A growing list of pre-built integrations that your LLM can directly plug into The flexibility to switch between LLM providers and vendors Best practices for securing your data within your infrastructure\n\nAt its core, MCP follows a client-server architecture where a host application can connect to multiple servers: MCP Hosts\n: Programs like Claude Desktop, IDEs, or AI tools that want to access data through MCP MCP Clients\n: Protocol clients that maintain 1:1 connections with servers MCP Servers\n: Lightweight programs that each expose specific capabilities through the standardized Model Context Protocol Local Data Sources\n: Your computer’s files, databases, and services that MCP servers can securely access Remote Services\n: External systems available over the internet (e.g., through APIs) that MCP servers can connect to\n\nChoose the path that best fits your needs: ​ Quick Starts\n\nGet started building your own server to use in Claude for Desktop and other clients\n\nGet started building your own client that can integrate with all MCP servers\n\nGet started using pre-built servers in Claude for Desktop ​ Examples\n\nCheck out our gallery of official MCP servers and implementations\n\nView the list of clients that support MCP integrations\n\nLearn how to use LLMs like Claude to speed up your MCP development\n\nLearn how to effectively debug MCP servers and integrations\n\nTest and inspect your MCP servers with our interactive debugging tool\n\nDive deeper into MCP’s core concepts and capabilities:\n\nUnderstand how MCP connects clients, servers, and LLMs\n\nExpose data and content from your servers to LLMs\n\nCreate reusable prompt templates and workflows\n\nEnable LLMs to perform actions through your server\n\nLet your servers request completions from LLMs\n\nLearn about MCP’s communication mechanism\n\nWant to contribute? Check out our\nContributing Guide\nto learn how you can help improve MCP.\n\nHere’s how to get help or provide feedback: For bug reports and feature requests related to the MCP specification, SDKs, or documentation (open source), please\ncreate a GitHub issue For discussions or Q&A about the MCP specification, use the\nspecification discussions For discussions or Q&A about other MCP open source components, use the\norganization discussions For bug reports, feature requests, and questions related to Claude.app and claude.ai’s MCP integration, please see Anthropic’s guide on\nHow to Get Support Was this page helpful? Yes No For Server Developers On this page Why MCP? General architecture Get started Quick Starts Examples Tutorials Explore MCP Contributing Support and Feedback"
    }
]