[
    {
        "source_url": "https://github.com/openai/codex",
        "title": "GitHub - openai/codex: Lightweight coding agent that runs in your terminal",
        "text": "OpenAI Codex CLI Lightweight coding agent that runs in your terminal npm i -g @openai/codex Table of Contents Experimental Technology Disclaimer Quickstart Why Codex? Funding Opportunity Security Model & Permissions Platform sandboxing details System Requirements CLI Reference Memory & Project Docs Non‑interactive / CI mode Recipes Installation Configuration FAQ Contributing Development workflow Writing high‑impact code changes Opening a pull request Review process Community values Getting help Contributor License Agreement (CLA) Quick fixes Releasing codex Security & Responsible AI License\n\nCodex CLI is an experimental project under active development. It is not yet stable, may contain bugs, incomplete features, or undergo breaking changes. We’re building it in the open with the community and welcome: Bug reports Feature requests Pull requests Good vibes Help us improve by filing issues or submitting PRs (see the section below for how to contribute)!\n\nInstall globally: npm install -g @openai/codex Next, set your OpenAI API key as an environment variable: export\nOPENAI_API_KEY=\n\"\nyour-api-key-here\n\" Note: This command sets the key only for your current terminal session. To make it permanent, add the export line to your shell's configuration file (e.g., ~/.zshrc ). Run interactively: codex Or, run with a prompt as input (and optionally in Full Auto mode): codex\n\"\nexplain this codebase to me\n\" codex --approval-mode full-auto\n\"\ncreate the fanciest todo-list app\n\" That’s it – Codex will scaffold a file, run it inside a sandbox, install any\nmissing dependencies, and show you the live result. Approve the changes and\nthey’ll be committed to your working directory.\n\nCodex CLI is built for developers who already\nlive in the terminal\nand want\nChatGPT‑level reasoning\nplus\nthe power to actually run code, manipulate\nfiles, and iterate – all under version control. In short, it’s\nchat‑driven\ndevelopment\nthat understands and executes your repo. Zero setup\n— bring your OpenAI API key and it just works! Full auto-approval, while safe + secure\nby running network-disabled and directory-sandboxed Multimodal\n— pass in screenshots or diagrams to implement features ✨ And it's\nfully open-source\nso you can see and contribute to how it develops!\n\nWe’re excited to launch a\n$1 million initiative\nsupporting open source projects that use Codex CLI and other OpenAI models. Grants are awarded in\n$25,000\nAPI credit increments. Applications are reviewed\non a rolling basis\n. Interested?\nApply here\n.\n\nCodex lets you decide how much autonomy the agent receives and auto-approval policy via the --approval-mode flag (or the interactive onboarding prompt): Mode What the agent may do without asking Still requires approval Suggest\n(default) • Read any file in the repo •\nAll\nfile writes/patches\n•\nAll\nshell/Bash commands Auto Edit • Read\nand\napply‑patch writes to files •\nAll\nshell/Bash commands Full Auto • Read/write files\n• Execute shell commands – In\nFull Auto\nevery command is run\nnetwork‑disabled\nand confined to the\ncurrent working directory (plus temporary files) for defense‑in‑depth. Codex\nwill also show a warning/confirmation if you start in\nauto‑edit\nor\nfull‑auto\nwhile the directory is\nnot\ntracked by Git, so you always have a\nsafety net. Coming soon: you’ll be able to whitelist specific commands to auto‑execute with\nthe network enabled, once we’re confident in additional safeguards.\n\nThe hardening mechanism Codex uses depends on your OS: macOS 12+ – commands are wrapped with Apple Seatbelt ( sandbox-exec ). Everything is placed in a read‑only jail except for a small set of\nwritable roots ( $PWD , $TMPDIR , ~/.codex , etc.). Outbound network is fully blocked by default – even if a child process\ntries to curl somewhere it will fail. Linux – we recommend using Docker for sandboxing, where Codex launches itself inside a minimal\ncontainer image and mounts your repo read/write at the same path. A\ncustom iptables / ipset firewall script denies all egress except the\nOpenAI API. This gives you deterministic, reproducible runs without needing\nroot on the host. You can read more in run_in_container.sh Both approaches are transparent to everyday usage – you still run codex from your repo root and approve/reject steps as usual.\n\nRequirement Details Operating systems macOS 12+, Ubuntu 20.04+/Debian 10+, or Windows 11\nvia WSL2 Node.js 22 or newer\n(LTS recommended) Git (optional, recommended) 2.23+ for built‑in PR helpers RAM 4‑GB minimum (8‑GB recommended) Never run sudo npm install -g ; fix npm permissions instead.\n\nCommand Purpose Example codex Interactive REPL codex codex \"…\" Initial prompt for interactive REPL codex \"fix lint errors\" codex -q \"…\" Non‑interactive \"quiet mode\" codex -q --json \"explain utils.ts\" codex completion <bash|zsh|fish> Print shell completion script codex completion bash Key flags: --model/-m , --approval-mode/-a , and --quiet/-q .\n\nCodex merges Markdown instructions in this order: ~/.codex/instructions.md – personal global guidance codex.md at repo root – shared project notes codex.md in cwd – sub‑package specifics Disable with --no-project-doc or CODEX_DISABLE_PROJECT_DOC=1 .\n\nRun Codex head‑less in pipelines. Example GitHub Action step: -\nname\n:\nUpdate changelog via Codex\nrun\n:\n|\nnpm install -g @openai/codex\nexport OPENAI_API_KEY=\"${{ secrets.OPENAI_KEY }}\"\ncodex -a auto-edit --quiet \"update CHANGELOG for next release\" Set CODEX_QUIET_MODE=1 to silence interactive UI noise.\n\nBelow are a few bite‑size examples you can copy‑paste. Replace the text in quotes with your own task. See the\nprompting guide\nfor more tips and usage patterns. ✨ What you type What happens 1 codex \"Refactor the Dashboard component to React Hooks\" Codex rewrites the class component, runs npm test , and shows the diff. 2 codex \"Generate SQL migrations for adding a users table\" Infers your ORM, creates migration files, and runs them in a sandboxed DB. 3 codex \"Write unit tests for utils/date.ts\" Generates tests, executes them, and iterates until they pass. 4 codex \"Bulk‑rename *.jpeg → *.jpg with git mv\" Safely renames files and updates imports/usages. 5 codex \"Explain what this regex does: ^(?=.*[A-Z]).{8,}$\" Outputs a step‑by‑step human explanation. 6 codex \"Carefully review this repo, and propose 3 high impact well-scoped PRs\" Suggests impactful PRs in the current codebase. 7 codex \"Look for vulnerabilities and create a security review report\" Finds and explains security bugs.\n\nFrom npm (Recommended) npm install -g @openai/codex\n#\nor\nyarn global add @openai/codex Build from source #\nClone the repository and navigate to the CLI package\ngit clone https://github.com/openai/codex.git\ncd\ncodex/codex-cli\n#\nInstall dependencies and build\nnpm install\nnpm run build\n#\nGet the usage and the options\nnode ./dist/cli.js --help\n#\nRun the locally‑built CLI directly\nnode ./dist/cli.js\n#\nOr link the command globally for convenience\nnpm link\n\nCodex looks for config files in ~/.codex/ . #\n~/.codex/config.yaml\nmodel\n:\no4-mini\n#\nDefault model\nfullAutoErrorMode\n:\nask-user\n#\nor ignore-and-continue You can also define custom instructions: #\n~/.codex/instructions.md\n-\nAlways respond with emojis\n-\nOnly use git commands if I explicitly mention you should\n\nOpenAI released a model called Codex in 2021 - is this related? In 2021, OpenAI released Codex, an AI system designed to generate code from natural language prompts. That original Codex model was deprecated as of March 2023 and is separate from the CLI tool. How do I stop Codex from touching my repo? Codex always runs in a\nsandbox first\n. If a proposed command or file change looks suspicious you can simply answer\nn\nwhen prompted and nothing happens to your working tree. Does it work on Windows? Not directly. It requires\nWindows Subsystem for Linux (WSL2)\n– Codex has been tested on macOS and Linux with Node ≥ 22. Which models are supported? Any model available with Responses API . The default is o4-mini , but pass --model gpt-4o or set model: gpt-4o in your config file to override.\n\nThis project is under active development and the code will likely change pretty significantly. We'll update this message once that's complete! More broadly we welcome contributions – whether you are opening your very first pull request or you’re a seasoned maintainer. At the same time we care about reliability and long‑term maintainability, so the bar for merging code is intentionally\nhigh\n. The guidelines below spell out what “high‑quality” means in practice and should make the whole process transparent and friendly.\n\nCreate a topic branch from main – e.g. feat/interactive-prompt . Keep your changes focused. Multiple unrelated fixes should be opened as separate PRs. Use npm run test:watch during development for super‑fast feedback. We use\nVitest\nfor unit tests,\nESLint\n+\nPrettier\nfor style, and\nTypeScript\nfor type‑checking. Before pushing, run the full test/type/lint suite: npm\ntest\n&&\nnpm run lint\n&&\nnpm run typecheck If you have\nnot\nyet signed the Contributor License Agreement (CLA), add a PR comment containing the exact text I have read the CLA Document and I hereby sign the CLA The CLA‑Assistant bot will turn the PR status green once all authors have signed. #\nWatch mode (tests rerun on change)\nnpm run test:watch\n#\nType‑check without emitting files\nnpm run typecheck\n#\nAutomatically fix lint + prettier issues\nnpm run lint:fix\nnpm run format:fix\n\nStart with an issue.\nOpen a new one or comment on an existing discussion so we can agree on the solution before code is written. Add or update tests.\nEvery new feature or bug‑fix should come with test coverage that fails before your change and passes afterwards. 100 % coverage is not required, but aim for meaningful assertions. Document behaviour. If your change affects user‑facing behaviour, update the README, inline help ( codex --help ), or relevant example projects. Keep commits atomic.\nEach commit should compile and the tests should pass. This makes reviews and potential rollbacks easier.\n\nFill in the PR template (or include similar information) –\nWhat? Why? How? Run all checks locally ( npm test && npm run lint && npm run typecheck ). CI failures that could have been caught locally slow down the process. Make sure your branch is up‑to‑date with main and that you have resolved merge conflicts. Mark the PR as\nReady for review\nonly when you believe it is in a merge‑able state.\n\nOne maintainer will be assigned as a primary reviewer. We may ask for changes – please do not take this personally. We value the work, we just also value consistency and long‑term maintainability. When there is consensus that the PR meets the bar, a maintainer will squash‑and‑merge.\n\nBe kind and inclusive.\nTreat others with respect; we follow the\nContributor Covenant\n. Assume good intent.\nWritten communication is hard – err on the side of generosity. Teach & learn.\nIf you spot something confusing, open an issue or PR with improvements.\n\nIf you run into problems setting up the project, would like feedback on an idea, or just want to say\nhi\n– please open a Discussion or jump into the relevant issue. We are happy to help. Together we can make Codex CLI an incredible tool.\nHappy hacking!\n🚀\n\nAll contributors\nmust\naccept the CLA. The process is lightweight: Open your pull request. Paste the following comment (or reply recheck if you’ve signed before): I have read the CLA Document and I hereby sign the CLA The CLA‑Assistant bot records your signature in the repo and marks the status check as passed. No special Git commands, email attachments, or commit footers required. Quick fixes Scenario Command Amend last commit git commit --amend -s --no-edit && git push -f GitHub UI only Edit the commit message in the PR → add Signed-off-by: Your Name <email@example.com> The\nDCO check\nblocks merges until every commit in the PR carries the footer (with squash this is just the one).\n\nTo publish a new version of the CLI, run the release scripts defined in codex-cli/package.json : Open the codex-cli directory Make sure you're on a branch like git checkout -b bump-version Bump the version and CLI_VERSION to current datetime: npm run release:version Commit the version bump (with DCO sign-off): git add codex-cli/src/utils/session.ts codex-cli/package.json\ngit commit -s -m\n\"\nchore(release): codex-cli v\n$(\nnode -p\n\\\"\nrequire(\n'\n./codex-cli/package.json\n'\n).version\n\\\"\n)\n\" Copy README, build, and publish to npm: npm run release Push to branch: git push origin HEAD\n\nHave you discovered a vulnerability or have concerns about model output? Please e‑mail\nsecurity@openai.com\nand we will respond promptly.\n\nThis repository is licensed under the\nApache-2.0 License\n."
    }
]