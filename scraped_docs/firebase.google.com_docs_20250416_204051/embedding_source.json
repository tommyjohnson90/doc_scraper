[
    {
        "source_url": "https://firebase.google.com/docs/admin/setup",
        "title": "Add the Firebase Admin SDK to your server",
        "text": "Check out the latest news from Firebase at Cloud Next 2025. Learn more. Firebase Documentation Admin SDK Fundamentals Send feedback Add the Firebase Admin SDK to your server Stay organized with collections Save and categorize content based on your preferences. The\nAdmin SDK\nis a set of server libraries that lets you interact with\nFirebase from privileged environments to perform actions like: Perform queries and mutations on a\nFirebase Data Connect\nservice for\nbulk data management and other operations with full admin privileges. Read and write\nRealtime Database\ndata with full admin privileges. Programmatically send\nFirebase Cloud Messaging\nmessages using a simple,\nalternative approach to the\nFirebase Cloud Messaging\nserver protocols. Generate and verify Firebase auth tokens. Access\nGoogle Cloud\nresources like\nCloud Storage\nbuckets and\nCloud Firestore\ndatabases associated with your Firebase projects. Create your own simplified admin console to do things like look up user data\nor change a user's email address for authentication. If you are interested in using the Node.js SDK as a client for end-user access\n(for example, in a Node.js desktop or IoT application), as opposed to admin\naccess from a privileged environment (like a server), you should instead follow\nthe\ninstructions for setting up the client JavaScript SDK\n. Here is a feature matrix showing what Firebase features are supported in each\nlanguage: Feature Node.js Java Python Go C# Custom Token Minting ID Token Verification User Management Control Access With Custom Claims Refresh Token Revocation Import Users Session Cookie Management Generating Email Action Links Managing SAML/OIDC provider configurations Multi-tenancy support Firebase Data Connect Realtime Database * Firebase Cloud Messaging FCM\nMulticast Manage\nFCM\nTopic Subscriptions Cloud Storage Cloud Firestore Enqueue functions with Cloud Tasks Project Management Security Rules ML Model Management Firebase Remote Config Firebase App Check Firebase Extensions To learn more about\nAdmin SDK\nintegration for these uses, see the corresponding\nRealtime Database\n,\nFCM\n,\nAuthentication\n,\nRemote Config\n,\nand\nCloud Storage\ndocumentation.\nThe rest of this page focuses on basic setup for the\nAdmin SDK\n.\n\nMake sure that you have a server app. Make sure that your server runs the following depending on which\nAdmin SDK\nthat you use: Admin Node.js SDK — Node.js 18+ Admin Java SDK — Java 8+ Admin Python SDK — Python 3.7+ (recommend Python 3.8+)\nPython 3.7 support is deprecated. Admin Go SDK — Go 1.21+ Admin .NET SDK — .NET Framework 4.6.2+ or .NET Standard 2.0 for .NET 6.0+\n\nTo use the\nFirebase\nAdmin SDK\n, you'll need the following: A Firebase project. A Firebase Admin SDK service account to communicate with Firebase. This\nservice account is created automatically when you create a Firebase project\nor add Firebase to a Google Cloud project. A configuration file with your service account's credentials. If you don't already have a Firebase project, you need to create one in the\nFirebase\nconsole\n. Visit\nUnderstand Firebase Projects\nto learn more about\nFirebase projects. Create a Firebase project In the\nFirebase\nconsole\n, click\nAdd project\n. To add Firebase resources to an\nexisting\nGoogle Cloud\nproject, enter its project name or select it from the dropdown menu. To create a\nnew\nproject, enter a project name. You can also\noptionally edit the project ID displayed below the project name. If prompted, review and accept the\nFirebase terms\n. Click\nContinue\n. (Optional)\nSet up\nGoogle Analytics\nfor your project, which\nenables an optimal experience using the following Firebase products:\nFirebase A/B Testing\n,\nCloud Messaging\n,\nCrashlytics\n,\nIn-App Messaging\n, and\nRemote Config\n(including\nPersonalization\n). Either select an existing\nGoogle Analytics\naccount\nor create a new account. If you create a new account, select your\nAnalytics\nreporting location\n,\nthen accept the data sharing settings and\nGoogle Analytics\nterms for\nyour project. Click\nCreate project\n(or\nAdd Firebase\n,\nif you're adding Firebase to an existing\nGoogle Cloud\nproject). Firebase automatically provisions resources for your Firebase project. When\nthe process completes, you'll be taken to the overview page for your Firebase\nproject in the\nFirebase\nconsole.\n\nIf you are setting up a new project, you need to install the SDK for the\nlanguage of your choice.\n\nThe Firebase Admin Node.js SDK is available on npm. If you don't already\nhave a package.json file, create one via npm init . Next, install the firebase-admin npm package and save it to your package.json : npm install firebase-admin --save To use the module in your application, require it from any JavaScript\nfile: const\n{\ninitializeApp\n}\n=\nrequire\n(\n'firebase-admin/app'\n); If you are using ES2015, you can import the module: import\n{\ninitializeApp\n}\nfrom\n'firebase-admin/app'\n;\n\nThe Firebase Admin Java SDK is published to the Maven central repository.\nTo install the library, declare it as a dependency in your build.gradle file: dependencies\n{\nimplementation\n'\ncom\n.\ngoogle\n.\nfirebase\n:\nfirebase\n-\nadmin\n:\n9.4.3\n'\n} If you use Maven to build your application, you can add the following\ndependency to your pom.xml : <\ndependency\n>\n<\ngroupId>com\n.\ngoogle\n.\nfirebase\n<\n/\ngroupId\n>\n<\nartifactId>firebase\n-\nadmin\n<\n/\nartifactId\n>\n<\nversion>9\n.4.3\n<\n/\nversion\n>\n<\n/\ndependency\n>\n\nThe Firebase Admin Python SDK is available via pip .\nYou can install the library for all users via sudo : sudo pip install firebase-admin Or, you can install the library for just the current user by passing the --user flag: pip install --user firebase-admin\n\nThe Go Admin SDK can be installed using the go get utility: #\nInstall\nthe\nlatest\nversion\n:\ngo\nget\nfirebase\n.\ngoogle\n.\ncom\n/\ngo\n/\nv4\n@\nlatest\n#\nOr\ninstall\na\nspecific\nversion\n:\ngo\nget\nfirebase\n.\ngoogle\n.\ncom\n/\ngo\n/\nv4\n@\n4.15.2\n\nThe .NET\nAdmin SDK\ncan be installed using the .NET package manager: Install-Package FirebaseAdmin -Version 3.1.0 Alternatively, install it using the dotnet command-line utility: dotnet add package FirebaseAdmin --version 3.1.0 Or, you can install it by adding the following package reference entry to\nyour .csproj file: <\nItemGroup\n>\n<\nPackageReference\nInclude\n=\n\"FirebaseAdmin\"\nVersion\n=\n\"3.1.0\"\n/\n>\n<\n/\nItemGroup\n>\n\nOnce you have created a Firebase project, you can initialize the SDK with\nGoogle Application Default Credentials\n.\nBecause default credentials lookup is fully automated in Google environments,\nwith no need to supply environment variables or other configuration, this way of\ninitializing the SDK is strongly recommended for applications running in Google\nenvironments such as\nFirebase App Hosting\n, Cloud Run, App Engine, and\nCloud Functions for Firebase\n. To optionally specify initialization options for services such as Realtime Database , Cloud Storage , or Cloud Functions , use the FIREBASE_CONFIG environment variable. If the content of the FIREBASE_CONFIG variable begins\nwith a { it will be parsed as a JSON object. Otherwise the SDK assumes that\nthe string is the path of a JSON file containing the options.\n\nconst\napp\n=\ninitializeApp\n();\n\nFirebaseApp\n.\ninitializeApp\n();\n\ndefault_app\n=\nfirebase_admin\n.\ninitialize_app\n()\n\napp , err := firebase . NewApp ( context . Background (), nil ) if err != nil { log . Fatalf ( \"error initializing app: %v\\n\" , err ) } init\n.\ngo\n\nFirebaseApp\n.\nCreate\n(); Once it is initialized, you can use the\nAdmin SDK\nto accomplish\nthe following types of tasks: Implement custom authentication Manage your\nFirebase Authentication\nusers Perform administrative queries and mutations on a\nFirebase Data Connect\nservice\n. Read and write data from the\nRealtime Database Send\nFirebase Cloud Messaging\nmessages\n\nThe\nAdmin SDK\nalso provides a credential which allows you to authenticate\nwith a\nGoogle OAuth2\nrefresh token:\n\nconst\nmyRefreshToken\n=\n'...'\n;\n// Get refresh token from OAuth2 flow\ninitializeApp\n({\ncredential\n:\nrefreshToken\n(\nmyRefreshToken\n),\ndatabaseURL\n:\n'https://<DATABASE_NAME>.firebaseio.com'\n});\n\nFileInputStream\nrefreshToken\n=\nnew\nFileInputStream\n(\n\"path/to/refreshToken.json\"\n);\nFirebaseOptions\noptions\n=\nFirebaseOptions\n.\nbuilder\n()\n.\nsetCredentials\n(\nGoogleCredentials\n.\nfromStream\n(\nrefreshToken\n))\n.\nsetDatabaseUrl\n(\n\"https://<DATABASE_NAME>.firebaseio.com/\"\n)\n.\nbuild\n();\nFirebaseApp\n.\ninitializeApp\n(\noptions\n);\n\ncred\n=\ncredentials\n.\nRefreshToken\n(\n'path/to/refreshToken.json'\n)\ndefault_app\n=\nfirebase_admin\n.\ninitialize_app\n(\ncred\n)\n\nopt := option . WithCredentialsFile ( \"path/to/refreshToken.json\" ) config := & firebase . Config { ProjectID : \"my-project-id\" } app , err := firebase . NewApp ( context . Background (), config , opt ) if err != nil { log . Fatalf ( \"error initializing app: %v\\n\" , err ) } init\n.\ngo\n\nFirebaseApp\n.\nCreate\n(\nnew\nAppOptions\n()\n{\nCredential\n=\nGoogleCredential\n.\nFromFile\n(\n\"path/to/refreshToken.json\"\n),\n});\n\nIf you are working in a non-Google server environment in which default\ncredentials lookup can't be fully automated, you can initialize the SDK\nwith an exported service account key file. Firebase projects support Google\nservice accounts\n,\nwhich you can use to call Firebase\nserver APIs from your app server or trusted environment. If you're developing\ncode locally or deploying your application on-premises,\nyou can use credentials obtained\nvia this service account to authorize server requests. To authenticate a service account and authorize it\nto access Firebase services, you must generate a private key file in JSON\nformat. To generate a private key file for your service account: In the\nFirebase\nconsole, open\nSettings >\nService Accounts\n. Click\nGenerate New Private Key\n, then confirm by clicking\nGenerate Key\n. Securely store the JSON file containing the key. When authorizing via a service account, you have two choices for providing the\ncredentials to your application. You can either set the GOOGLE_APPLICATION_CREDENTIALS environment variable, or you can\nexplicitly pass the path to the service account key in code.\nThe first option is more secure and is strongly recommended. To set the environment variable: Set the environment variable GOOGLE_APPLICATION_CREDENTIALS to the file path of the JSON file that contains your service account key.\nThis variable only applies to your current shell session, so if you open\na new session, set the variable again.\n\nexport\nGOOGLE_APPLICATION_CREDENTIALS\n=\n\"/home/user/Downloads/service-account-file.json\"\n\nWith PowerShell: $\nenv\n:\nGOOGLE_APPLICATION_CREDENTIALS\n=\n\"C:\\Users\\username\\Downloads\\service-account-file.json\" After you've completed the above steps, Application Default Credentials (ADC)\nis able to implicitly determine your credentials, allowing you to use service\naccount credentials when testing or running in non-Google environments. Initialize the SDK as shown:\n\ninitializeApp\n({\ncredential\n:\napplicationDefault\n(),\ndatabaseURL\n:\n'https://<DATABASE_NAME>.firebaseio.com'\n});\n\nFirebaseOptions\noptions\n=\nFirebaseOptions\n.\nbuilder\n()\n.\nsetCredentials\n(\nGoogleCredentials\n.\ngetApplicationDefault\n())\n.\nsetDatabaseUrl\n(\n\"https://<DATABASE_NAME>.firebaseio.com/\"\n)\n.\nbuild\n();\nFirebaseApp\n.\ninitializeApp\n(\noptions\n);\n\ndefault_app\n=\nfirebase_admin\n.\ninitialize_app\n()\n\napp , err := firebase . NewApp ( context . Background (), nil ) if err != nil { log . Fatalf ( \"error initializing app: %v\\n\" , err ) } init\n.\ngo\n\nFirebaseApp . Create ( new AppOptions () { Credential = GoogleCredential . GetApplicationDefault (), ProjectId = \"my-project-id\" , }); FirebaseAppSnippets\n.\ncs\n\nIn most cases, you only have to initialize a single, default app. You can\naccess services off of that app in two equivalent ways:\n\n// Initialize the default app\nconst\ndefaultApp\n=\ninitializeApp\n(\ndefaultAppConfig\n);\nconsole\n.\nlog\n(\ndefaultApp\n.\nname\n);\n// '[DEFAULT]'\n// Retrieve services via the defaultApp variable...\nlet\ndefaultAuth\n=\ngetAuth\n(\ndefaultApp\n);\nlet\ndefaultDatabase\n=\ngetDatabase\n(\ndefaultApp\n);\n// ... or use the equivalent shorthand notation\ndefaultAuth\n=\ngetAuth\n();\ndefaultDatabase\n=\ngetDatabase\n();\n\n// Initialize the default app\nFirebaseApp\ndefaultApp\n=\nFirebaseApp\n.\ninitializeApp\n(\ndefaultOptions\n);\nSystem\n.\nout\n.\nprintln\n(\ndefaultApp\n.\ngetName\n());\n// \"[DEFAULT]\"\n// Retrieve services by passing the defaultApp variable...\nFirebaseAuth\ndefaultAuth\n=\nFirebaseAuth\n.\ngetInstance\n(\ndefaultApp\n);\nFirebaseDatabase\ndefaultDatabase\n=\nFirebaseDatabase\n.\ngetInstance\n(\ndefaultApp\n);\n// ... or use the equivalent shorthand notation\ndefaultAuth\n=\nFirebaseAuth\n.\ngetInstance\n();\ndefaultDatabase\n=\nFirebaseDatabase\n.\ngetInstance\n();\n\n# Import the Firebase service\nfrom\nfirebase_admin\nimport\nauth\n# Initialize the default app\ndefault_app\n=\nfirebase_admin\n.\ninitialize_app\n(\ncred\n)\nprint\n(\ndefault_app\n.\nname\n)\n# \"[DEFAULT]\"\n# Retrieve services via the auth package...\n# auth.create_custom_token(...)\n\n// Initialize default app app , err := firebase . NewApp ( context . Background (), nil ) if err != nil { log . Fatalf ( \"error initializing app: %v\\n\" , err ) } // Access auth service from the default app client , err := app . Auth ( context . Background ()) if err != nil { log . Fatalf ( \"error getting Auth client: %v\\n\" , err ) } init\n.\ngo\n\n// Initialize the default app\nvar\ndefaultApp\n=\nFirebaseApp\n.\nCreate\n(\nnew\nAppOptions\n()\n{\nCredential\n=\nGoogleCredential\n.\nGetApplicationDefault\n(),\n});\nConsole\n.\nWriteLine\n(\ndefaultApp\n.\nName\n);\n// \"[DEFAULT]\"\n// Retrieve services by passing the defaultApp variable...\nvar\ndefaultAuth\n=\nFirebaseAuth\n.\nGetAuth\n(\ndefaultApp\n);\n// ... or use the equivalent shorthand notation\ndefaultAuth\n=\nFirebaseAuth\n.\nDefaultInstance\n; Some use cases require you to create multiple apps at the same time. For\nexample, you might want to read data from the\nRealtime Database\nof one Firebase\nproject and mint custom tokens for another project. Or you might want to\nauthenticate two apps with separate credentials. The Firebase SDK allows you\ncreate multiple apps at the same time, each with their own configuration\ninformation.\n\n// Initialize the default app\ninitializeApp\n(\ndefaultAppConfig\n);\n// Initialize another app with a different config\nvar\notherApp\n=\ninitializeApp\n(\notherAppConfig\n,\n'other'\n);\nconsole\n.\nlog\n(\ngetApp\n().\nname\n);\n// '[DEFAULT]'\nconsole\n.\nlog\n(\notherApp\n.\nname\n);\n// 'other'\n// Use the shorthand notation to retrieve the default app's services\nconst\ndefaultAuth\n=\ngetAuth\n();\nconst\ndefaultDatabase\n=\ngetDatabase\n();\n// Use the otherApp variable to retrieve the other app's services\nconst\notherAuth\n=\ngetAuth\n(\notherApp\n);\nconst\notherDatabase\n=\ngetDatabase\n(\notherApp\n);\n\n// Initialize the default app\nFirebaseApp\ndefaultApp\n=\nFirebaseApp\n.\ninitializeApp\n(\ndefaultOptions\n);\n// Initialize another app with a different config\nFirebaseApp\notherApp\n=\nFirebaseApp\n.\ninitializeApp\n(\notherAppConfig\n,\n\"other\"\n);\nSystem\n.\nout\n.\nprintln\n(\ndefaultApp\n.\ngetName\n());\n// \"[DEFAULT]\"\nSystem\n.\nout\n.\nprintln\n(\notherApp\n.\ngetName\n());\n// \"other\"\n// Use the shorthand notation to retrieve the default app's services\nFirebaseAuth\ndefaultAuth\n=\nFirebaseAuth\n.\ngetInstance\n();\nFirebaseDatabase\ndefaultDatabase\n=\nFirebaseDatabase\n.\ngetInstance\n();\n// Use the otherApp variable to retrieve the other app's services\nFirebaseAuth\notherAuth\n=\nFirebaseAuth\n.\ngetInstance\n(\notherApp\n);\nFirebaseDatabase\notherDatabase\n=\nFirebaseDatabase\n.\ngetInstance\n(\notherApp\n);\n\n# Initialize the default app\ndefault_app\n=\nfirebase_admin\n.\ninitialize_app\n(\ncred\n)\n#  Initialize another app with a different config\nother_app\n=\nfirebase_admin\n.\ninitialize_app\n(\ncred\n,\nname\n=\n'other'\n)\nprint\n(\ndefault_app\n.\nname\n)\n# \"[DEFAULT]\"\nprint\n(\nother_app\n.\nname\n)\n# \"other\"\n# Retrieve default services via the auth package...\n# auth.create_custom_token(...)\n# Use the `app` argument to retrieve the other app's services\n# auth.create_custom_token(..., app=other_app)\n\n// Initialize the default app defaultApp , err := firebase . NewApp ( context . Background (), nil ) if err != nil { log . Fatalf ( \"error initializing app: %v\\n\" , err ) } // Initialize another app with a different config opt := option . WithCredentialsFile ( \"service-account-other.json\" ) otherApp , err := firebase . NewApp ( context . Background (), nil , opt ) if err != nil { log . Fatalf ( \"error initializing app: %v\\n\" , err ) } // Access Auth service from default app defaultClient , err := defaultApp . Auth ( context . Background ()) if err != nil { log . Fatalf ( \"error getting Auth client: %v\\n\" , err ) } // Access auth service from other app otherClient , err := otherApp . Auth ( context . Background ()) if err != nil { log . Fatalf ( \"error getting Auth client: %v\\n\" , err ) } init\n.\ngo\n\n// Initialize the default app\nvar\ndefaultApp\n=\nFirebaseApp\n.\nCreate\n(\ndefaultOptions\n);\n// Initialize another app with a different config\nvar\notherApp\n=\nFirebaseApp\n.\nCreate\n(\notherAppConfig\n,\n\"other\"\n);\nConsole\n.\nWriteLine\n(\ndefaultApp\n.\nName\n);\n// \"[DEFAULT]\"\nConsole\n.\nWriteLine\n(\notherApp\n.\nName\n);\n// \"other\"\n// Use the shorthand notation to retrieve the default app's services\nvar\ndefaultAuth\n=\nFirebaseAuth\n.\nDefaultInstance\n;\n// Use the otherApp variable to retrieve the other app's services\nvar\notherAuth\n=\nFirebaseAuth\n.\nGetAuth\n(\notherApp\n);\n\nIf you're using a Google Compute Engine VM with Google Application Default\nCredentials for Realtime Database or Authentication , make sure to also set the right access scopes .\nFor Realtime Database and Authentication , you need scopes ending in userinfo.email and\neither cloud-platform or firebase.database . To check the existing access\nscopes and change them, run the following commands using gcloud .\n\n#\nCheck\nthe\nexisting\naccess\nscopes\ngcloud\ncompute\ninstances\ndescribe\n[\nINSTANCE_NAME\n]\n--format json\n#\nThe\nabove\ncommand\nreturns\nthe\nservice\naccount\ninformation\n.\nFor\nexample\n:\n\"serviceAccounts\"\n:\n[\n{\n\"email\": \"your.gserviceaccount.com\",\n\"scopes\": [\n\"https://www.googleapis.com/auth/cloud-platform\",\n\"https://www.googleapis.com/auth/userinfo.email\"\n]\n}\n]\n,\n#\nStop\nthe\nVM\n,\nthen\nrun\nthe\nfollowing\ncommand\n,\nusing\nthe\nservice\naccount\n#\nthat\ngcloud\nreturned\nwhen\nyou\nchecked\nthe\nscopes\n.\ngcloud\ncompute\ninstances\nset\n-\nservice\n-\naccount\n[\nINSTANCE_NAME\n]\n--service-account \"your.gserviceaccount.com\" --scopes \"https://www.googleapis.com/auth/firebase.database,https://www.googleapis.com/auth/userinfo.email\"\n\nWhen testing the Admin SDK locally with Google Application Default Credentials obtained by running gcloud auth application-default login , additional\nchanges are needed to use Firebase Authentication due to the following: Firebase Authentication\ndoes not accept gcloud end user credentials generated using\nthe gcloud OAuth client ID. Firebase Authentication\nrequires the project ID to be provided on initialization for\nthese type of end user credentials. As a workaround, you can generate Google Application Default Credentials in\ngcloud\nusing your own\nOAuth 2.0 client ID\n.\nThe OAuth client ID has to be a\nDesktop app\napplication type.\n\ngcloud auth application-default login --client-id-file=[/path/to/client/id/file] You can specify the project ID explicitly on app initialization or just use the GOOGLE_CLOUD_PROJECT environment variable. The latter avoids the need to make\nany additional changes to test your code. To explicitly specify the project ID:\n\nimport\n{\ninitializeApp\n,\napplicationDefault\n}\nfrom\n'firebase-admin/app'\n;\ninitializeApp\n({\ncredential\n:\napplicationDefault\n(),\nprojectId\n:\n'<FIREBASE_PROJECT_ID>'\n,\n});\n\nFirebaseOptions\noptions\n=\nFirebaseOptions\n.\nbuilder\n()\n.\nsetCredentials\n(\nGoogleCredentials\n.\ngetApplicationDefault\n())\n.\nsetProjectId\n(\n\"<FIREBASE_PROJECT_ID>\"\n)\n.\nbuild\n();\nFirebaseApp\n.\ninitializeApp\n(\noptions\n);\n\napp_options\n=\n{\n'projectId'\n:\n'<FIREBASE_PROJECT_ID>'\n}\ndefault_app\n=\nfirebase_admin\n.\ninitialize_app\n(\noptions\n=\napp_options\n)\n\nconfig\n:=\n&\nfirebase\n.\nConfig\n{\nProjectID\n:\n\"<FIREBASE_PROJECT_ID>\"\n}\napp\n,\nerr\n:=\nfirebase\n.\nNewApp\n(\ncontext\n.\nBackground\n(),\nconfig\n)\nif\nerr\n!=\nnil\n{\nlog\n.\nFatalf\n(\n\"error initializing app: %v\\n\"\n,\nerr\n)\n}\n\nFirebaseApp\n.\nCreate\n(\nnew\nAppOptions\n()\n{\nCredential\n=\nGoogleCredential\n.\nGetApplicationDefault\n(),\nProjectId\n=\n\"<FIREBASE_PROJECT_ID>\"\n,\n});\n\nLearn about Firebase: Explore\nsample Firebase apps\n. Explore the open source code in GitHub for\nNode.js\n,\nJava\n,\nand\nPython\n. Read\nAdmin SDK\n-related blog posts\nby one of\nthe creators of the\nAdmin SDK\n. For example:\nAccessing Firestore and Firebase through a proxy server\n. Add Firebase features to your app: Write a serverless backend with\nCloud Functions\n. Store info with\nRealtime Database\nor blob data with\nCloud Storage\n. Receive notifications with\nCloud Messaging\n. Send feedback"
    }
]